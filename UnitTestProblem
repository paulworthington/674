****************************
my app's web.xml
<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:SchemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_2.5.xsd">
	
	<display-name>pdf admin tool</display-name>
	
	<servlet>
		<servlet-name>login</servlet-name>
		<servlet-class>controllers.LoginControllerServlet</servlet-class>
	</servlet>
	
	<servlet>
		<servlet-name>addpdf</servlet-name>
		<servlet-class>controllers.AddPDFControllerServlet</servlet-class>
	</servlet>
	
	<servlet>
		<servlet-name>viewall</servlet-name>
		<servlet-class>controllers.ViewAllControllerServlet</servlet-class>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>login</servlet-name>
		<url-pattern>/login</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>addpdf</servlet-name>
		<url-pattern>/addpdf</url-pattern>
	</servlet-mapping>
	
	<servlet-mapping>
		<servlet-name>viewall</servlet-name>
		<url-pattern>/viewall</url-pattern>
	</servlet-mapping>
	
	<resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/pdfadmin</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
   </resource-ref>
	
	<env-entry>
		<env-entry-name>IPDFService</env-entry-name>
		<env-entry-value>services.PDFServiceJDBCImpl</env-entry-value>
		<env-entry-type>java.lang.String</env-entry-type>
	</env-entry>
	
	<env-entry>
		<env-entry-name>ILoginService</env-entry-name>
		<env-entry-value>services.LoginServiceJDBCImpl</env-entry-value>
		<env-entry-type>java.lang.String</env-entry-type>
	</env-entry>	
	
</web-app>


**************************************************************************



**************************************************************************

My Factory.java
*************************************************************
package services;

import javax.naming.*;

public class Factory {
	
	public static Factory getInstance()
    {
        return new Factory();
    }
	
	public IService getService(String serviceName) throws Exception {
		try {
			Class c = Class.forName(getImplName(serviceName));
			return (IService) c.newInstance();
		} catch (Exception e) {
			throw new Exception(serviceName + " not loaded. " + e.getMessage());
		}
	}
	
	private String getImplName(String serviceName) throws Exception {
	     Context iniCtx = new InitialContext();
	     Context envCtx = (Context) iniCtx.lookup("java:/comp/env");
	     return (String)envCtx.lookup(serviceName);
	}
 
}
********************************************************

********************************************************
My FactoryTest.java
********************************************************
package services;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import junit.framework.TestCase;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource;

import domain.*;

public class FactoryTest extends TestCase {
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {

		try {
		  //set the system properties to get things ready
			System.setProperty(Context.URL_PKG_PREFIXES, "org.apache.naming");
			System.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.naming.java.javaURLContextFactory");
					
			InitialContext context = new InitialContext();

			//build the subcontext needed for the JNDI lookup.
			context.createSubcontext("java:");
			context.createSubcontext("java:/comp");
			context.createSubcontext("java:/comp/env").bind("ILoginService","services.LoginServiceJDBCImpl");
			context.createSubcontext("java:/comp/env/jdbc");

			//setup the datasource and properties
			MysqlConnectionPoolDataSource ds = new MysqlConnectionPoolDataSource();
			ds.setURL("jdbc:mysql://localhost:3306/pdfadmin");
			ds.setUser("root");
			ds.setPassword("admin");
			
            context.bind("java:/comp/env/jdbc/pdfadmin", ds);
		} catch (NamingException e) {
			System.out.println("Exception from BeforeClass: " + e.getMessage());
		}
	}
	
	@Test
	public void testMethod() {
		
		// this just tries to get an ILoginService
		System.out.println("\nStarting testMethod");
		System.out.println("Trying to get ILoginService");
		
		Factory factory = Factory.getInstance();
		try {
			ILoginService result = (ILoginService)factory.getService(ILoginService.NAME);
			assertNotNull(result);
		} catch (Exception e1) {
			System.out.println("Exception from testMethod: " + e1.getMessage());
			Assert.fail(e1.getMessage());
		}		
	}
	
    @Test
    public void testAuthenticate() {
    	// this tries to get an ILoginService and then call authenticate on a LoginBean
		System.out.println("\nStarting testAuthenticate");
		System.out.println("Trying to authenticate using ILoginService");
		
	    LoginBean bean = new LoginBean();
	    bean.setUsername("homer");
	    bean.setPassword("simp1234");
	
	    Factory factory = Factory.getInstance();
	    try {
	    	ILoginService loginSvc = (ILoginService) factory.getService(ILoginService.NAME);
	    	Assert.assertNotNull(loginSvc.authenticate(bean));
	    	} catch (Exception e) {
				System.out.println("Exception from testAuthenticate: " + e.getMessage());
	    		Assert.fail(e.getMessage());
	    	}
	    }
}
********************************************************

********************************************************
My ILoginService.java
********************************************************
package services;

import domain.*;

public interface ILoginService extends IService {
	
    public final String NAME = "ILoginService";
    public CustomerBean authenticate(LoginBean login) throws Exception;
}
********************************************************

********************************************************
My TOMCAT_HOME/conf/server.xml
********************************************************
<?xml version='1.0' encoding='utf-8'?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- Note:  A "Server" is not itself a "Container", so you may not
     define subcomponents such as "Valves" at this level.
     Documentation at /docs/config/server.html
 -->
<Server port="8005" shutdown="SHUTDOWN">
  <!-- Security listener. Documentation at /docs/config/listeners.html
  <Listener className="org.apache.catalina.security.SecurityListener" />
  -->
  <!--APR library loader. Documentation at /docs/apr.html -->
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html -->
  <Listener className="org.apache.catalina.core.JasperListener" />
  <!-- Prevent memory leaks due to use of particular java/javax APIs-->
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

  <!-- Global JNDI resources
       Documentation at /docs/jndi-resources-howto.html
  -->
  <GlobalNamingResources>
    <!-- Editable user database that can also be used by
         UserDatabaseRealm to authenticate users
    -->
    <Resource name="UserDatabase" auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
              
<!-- PRW: Works, but I don't need it?              
	<Resource name="jdbc/pdfadmin"
	auth="Container"
	type="javax.sql.DataSource"
	maxActive="100"
	maxIdle="30"
	maxWait="10000"
	username="root"
	password="admin"
	driverClassName="com.mysql.jdbc.Driver"
	url="jdbc:mysql://localhost:8080/pdfadmin?autoReconnect=true"/>
-->
	
  </GlobalNamingResources>

  <!-- A "Service" is a collection of one or more "Connectors" that share
       a single "Container" Note:  A "Service" is not itself a "Container",
       so you may not define subcomponents such as "Valves" at this level.
       Documentation at /docs/config/service.html
   -->
  <Service name="Catalina">

    <!--The connectors can use a shared executor, you can define one or more named thread pools-->
    <!--
    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
        maxThreads="150" minSpareThreads="4"/>
    -->


    <!-- A "Connector" represents an endpoint by which requests are received
         and responses are returned. Documentation at :
         Java HTTP Connector: /docs/config/http.html (blocking & non-blocking)
         Java AJP  Connector: /docs/config/ajp.html
         APR (HTTP/AJP) Connector: /docs/apr.html
         Define a non-SSL HTTP/1.1 Connector on port 8080
    -->
    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    -->
    <!-- Define a SSL HTTP/1.1 Connector on port 8443
         This connector uses the BIO implementation that requires the JSSE
         style configuration. When using the APR/native implementation, the
         OpenSSL style configuration is required as described in the APR/native
         documentation -->
    <!--
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol"
               maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
               clientAuth="false" sslProtocol="TLS" />
    -->

    <!-- Define an AJP 1.3 Connector on port 8009 -->
    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />


    <!-- An Engine represents the entry point (within Catalina) that processes
         every request.  The Engine implementation for Tomcat stand alone
         analyzes the HTTP headers included with the request, and passes them
         on to the appropriate Host (virtual host).
         Documentation at /docs/config/engine.html -->

    <!-- You should set jvmRoute to support load-balancing via AJP ie :
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
    -->
    <Engine name="Catalina" defaultHost="localhost">

      <!--For clustering, please take a look at documentation at:
          /docs/cluster-howto.html  (simple how to)
          /docs/config/cluster.html (reference documentation) -->
      <!--
      <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
      -->

      <!-- Use the LockOutRealm to prevent attempts to guess user passwords
           via a brute-force attack -->
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key "UserDatabase".  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  -->
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase"/>
      </Realm>

      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">

        <!-- SingleSignOn valve, share authentication between web applications
             Documentation at: /docs/config/valve.html -->
        <!--
        <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
        -->

        <!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern="common" -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log." suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />

      </Host>
    </Engine>
  </Service>
</Server>

********************************************************

********************************************************
My TOMCAT_HOME/conf/context.xml
********************************************************
<?xml version='1.0' encoding='utf-8'?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- The contents of this file will be loaded for each web application -->
<Context>

    <!-- Default set of monitored resources -->
    <WatchedResource>WEB-INF/web.xml</WatchedResource>

    <!-- Uncomment this to disable session persistence across Tomcat restarts -->
    <!--
    <Manager pathname="" />
    -->

    <!-- Uncomment this to enable Comet connection tacking (provides events
         on session expiration as well as webapp lifecycle) -->
    <!--
    <Valve className="org.apache.catalina.valves.CometConnectionManagerValve" />
    -->
    
<!-- PRW: Works, AND I need it! App will fail without it! -->
    <Resource name="jdbc/pdfadmin"
	auth="Container"
	type="javax.sql.DataSource"
	maxActive="100"
	maxIdle="30"
	maxWait="10000"
	username="root"
	password="admin"
	driverClassName="com.mysql.jdbc.Driver"
	url="jdbc:mysql://localhost:3306/pdfadmin?autoReconnect=true"/>

</Context>
********************************************************

********************************************************
My TOMCAT_HOME/Catalina/localhost/pdfadmin.xml
********************************************************
<Context path="/pdfadmin" reloadable="true" docBase="/Users/paulworthington/Documents/workspace/pdfadmin" workDir="/Users/paulworthington/Documents/workspace/pdfadmin/work" >
</Context>
********************************************************

********************************************************
My LoginServiceJDBCImplTest.java
********************************************************
package services;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import junit.framework.TestCase;

import org.junit.BeforeClass;
import org.junit.Test;

import com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource;

import domain.CustomerBean;
import domain.LoginBean;

public class LoginServiceJDBCImplTest extends TestCase {
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {

		try {
		  //set the system properties to get things ready
			System.setProperty(Context.URL_PKG_PREFIXES, "org.apache.naming");
			System.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.naming.java.javaURLContextFactory");
					
			InitialContext context = new InitialContext();

			//build the subcontext needed for the JNDI lookup.
			context.createSubcontext("java:");
			context.createSubcontext("java:/comp");
			context.createSubcontext("java:/comp/env").bind("ILoginService","services.LoginServiceJDBCImpl");
			context.createSubcontext("java:/comp/env/jdbc");

			//setup the datasource and properties
			MysqlConnectionPoolDataSource ds = new MysqlConnectionPoolDataSource();
			ds.setURL("jdbc:mysql://localhost:3306/pdfadmin");
			ds.setUser("root");
			ds.setPassword("admin");
			
            context.bind("java:/comp/env/jdbc/pdfadmin", ds);
		} catch (NamingException e) {
			System.out.println("BeforeClass: " + e.getMessage());
		}
	}

	@Test
	public void testAuthenticateValid() {
		System.out.println("\nStarting testAuthenticateValid");
	    LoginBean login = new LoginBean("homer", "simp1234");
		LoginServiceJDBCImpl instance = new LoginServiceJDBCImpl();
		CustomerBean result = null;
		
		try {
			result = instance.authenticate(login);
		} catch (Exception e) {
			System.out.println("Exception from testAuthenticateValid: " + e.getMessage());
			result = null;
		}
		assertNotNull(result);
	}
	
	@Test
	public void testAuthenticateInvalid() {
		System.out.println("\nStarting testAuthenticateInvalid");
	    LoginBean login = new LoginBean("homer", "NONONO");
		LoginServiceJDBCImpl instance = new LoginServiceJDBCImpl();
		CustomerBean result = null;
		try {
			result = instance.authenticate(login);
		} catch (Exception e) {
			System.out.println("Exception from testAuthenticateInvalid: " + e.getMessage());
			result = null;
		}
		assertNull(result);
	}
	
}
********************************************************

********************************************************
My ...
********************************************************

